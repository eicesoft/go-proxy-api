///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package app

import (
	"eicesoft/proxy-api/internal/model"
	"eicesoft/proxy-api/pkg/core"
	"fmt"
	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *App {
	return new(App)
}

func NewQueryBuilder() *appQueryBuilder {
	return new(appQueryBuilder)
}

func (t *App) Assign(src interface{}) {
	core.StructCopy(t, src)
}

func (t *App) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

func (t *App) Delete(db *gorm.DB) (err error) {
	if err = db.Delete(t).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (t *App) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = db.Model(&App{}).Where("id = ?", t.Id).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

type appQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *appQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = qb.buildUpdateQuery(db).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *appQueryBuilder) buildUpdateQuery(db *gorm.DB) *gorm.DB {
	ret := db.Model(&App{})
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	return ret
}

func (qb *appQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *appQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&App{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *appQueryBuilder) First(db *gorm.DB) (*App, error) {
	ret := &App{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *appQueryBuilder) QueryOne(db *gorm.DB) (*App, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *appQueryBuilder) QueryAll(db *gorm.DB) ([]*App, error) {
	var ret []*App
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *appQueryBuilder) Limit(limit int) *appQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *appQueryBuilder) Offset(offset int) *appQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *appQueryBuilder) WhereId(p model.Predicate, value int32) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) WhereIdIn(value []int32) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) WhereIdNotIn(value []int32) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) OrderById(asc bool) *appQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *appQueryBuilder) WhereName(p model.Predicate, value string) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) WhereNameIn(value []string) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) WhereNameNotIn(value []string) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) OrderByName(asc bool) *appQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *appQueryBuilder) WhereAppKey(p model.Predicate, value string) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_key", p),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) WhereAppKeyIn(value []string) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_key", "IN"),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) WhereAppKeyNotIn(value []string) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_key", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) OrderByAppKey(asc bool) *appQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "app_key "+order)
	return qb
}

func (qb *appQueryBuilder) WhereAppSecret(p model.Predicate, value string) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_secret", p),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) WhereAppSecretIn(value []string) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_secret", "IN"),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) WhereAppSecretNotIn(value []string) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_secret", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) OrderByAppSecret(asc bool) *appQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "app_secret "+order)
	return qb
}

func (qb *appQueryBuilder) WhereCreatedAt(p model.Predicate, value int64) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) WhereCreatedAtIn(value []int64) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) WhereCreatedAtNotIn(value []int64) *appQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appQueryBuilder) OrderByCreatedAt(asc bool) *appQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

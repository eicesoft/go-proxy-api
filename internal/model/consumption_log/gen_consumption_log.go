///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package consumption_log

import (
	"eicesoft/proxy-api/internal/model"
	"eicesoft/proxy-api/pkg/core"
	"fmt"
	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *ConsumptionLog {
	return new(ConsumptionLog)
}

func NewQueryBuilder() *consumptionLogQueryBuilder {
	return new(consumptionLogQueryBuilder)
}

func (t *ConsumptionLog) Assign(src interface{}) {
	core.StructCopy(t, src)
}

func (t *ConsumptionLog) Create(db *gorm.DB) (id int64, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

func (t *ConsumptionLog) Delete(db *gorm.DB) (err error) {
	if err = db.Delete(t).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (t *ConsumptionLog) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = db.Model(&ConsumptionLog{}).Where("id = ?", t.Id).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

type consumptionLogQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *consumptionLogQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = qb.buildUpdateQuery(db).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *consumptionLogQueryBuilder) buildUpdateQuery(db *gorm.DB) *gorm.DB {
	ret := db.Model(&ConsumptionLog{})
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	return ret
}

func (qb *consumptionLogQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *consumptionLogQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&ConsumptionLog{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *consumptionLogQueryBuilder) First(db *gorm.DB) (*ConsumptionLog, error) {
	ret := &ConsumptionLog{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *consumptionLogQueryBuilder) QueryOne(db *gorm.DB) (*ConsumptionLog, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *consumptionLogQueryBuilder) QueryAll(db *gorm.DB) ([]*ConsumptionLog, error) {
	var ret []*ConsumptionLog
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *consumptionLogQueryBuilder) Limit(limit int) *consumptionLogQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *consumptionLogQueryBuilder) Offset(offset int) *consumptionLogQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereId(p model.Predicate, value int64) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereIdIn(value []int64) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereIdNotIn(value []int64) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) OrderById(asc bool) *consumptionLogQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereBillingCount(p model.Predicate, value int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "billing_count", p),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereBillingCountIn(value []int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "billing_count", "IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereBillingCountNotIn(value []int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "billing_count", "NOT IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) OrderByBillingCount(asc bool) *consumptionLogQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "billing_count "+order)
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereBillingSum(p model.Predicate, value int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "billing_sum", p),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereBillingSumIn(value []int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "billing_sum", "IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereBillingSumNotIn(value []int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "billing_sum", "NOT IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) OrderByBillingSum(asc bool) *consumptionLogQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "billing_sum "+order)
	return qb
}

func (qb *consumptionLogQueryBuilder) WherePath(p model.Predicate, value string) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "path", p),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WherePathIn(value []string) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "path", "IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WherePathNotIn(value []string) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "path", "NOT IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) OrderByPath(asc bool) *consumptionLogQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "path "+order)
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereParams(p model.Predicate, value string) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params", p),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereParamsIn(value []string) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params", "IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereParamsNotIn(value []string) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "params", "NOT IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) OrderByParams(asc bool) *consumptionLogQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "params "+order)
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereAppId(p model.Predicate, value int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_id", p),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereAppIdIn(value []int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_id", "IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereAppIdNotIn(value []int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) OrderByAppId(asc bool) *consumptionLogQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "app_id "+order)
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereClientId(p model.Predicate, value int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "client_id", p),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereClientIdIn(value []int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "client_id", "IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereClientIdNotIn(value []int32) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "client_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) OrderByClientId(asc bool) *consumptionLogQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "client_id "+order)
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereCreatedAt(p model.Predicate, value int64) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereCreatedAtIn(value []int64) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) WhereCreatedAtNotIn(value []int64) *consumptionLogQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *consumptionLogQueryBuilder) OrderByCreatedAt(asc bool) *consumptionLogQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

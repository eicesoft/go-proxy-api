///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package orders

import (
	"eicesoft/proxy-api/internal/model"
	"eicesoft/proxy-api/pkg/core"
	"fmt"
	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Order {
	return new(Order)
}

func NewQueryBuilder() *ordersQueryBuilder {
	return new(ordersQueryBuilder)
}

func (t *Order) Assign(src interface{}) {
	core.StructCopy(t, src)
}

func (t *Order) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

func (t *Order) Delete(db *gorm.DB) (err error) {
	if err = db.Delete(t).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (t *Order) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = db.Model(&Order{}).Where("id = ?", t.Id).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

type ordersQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *ordersQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = qb.buildUpdateQuery(db).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *ordersQueryBuilder) buildUpdateQuery(db *gorm.DB) *gorm.DB {
	ret := db.Model(&Order{})
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	return ret
}

func (qb *ordersQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *ordersQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Order{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *ordersQueryBuilder) First(db *gorm.DB) (*Order, error) {
	ret := &Order{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *ordersQueryBuilder) QueryOne(db *gorm.DB) (*Order, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *ordersQueryBuilder) QueryAll(db *gorm.DB) ([]*Order, error) {
	var ret []*Order
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *ordersQueryBuilder) Limit(limit int) *ordersQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *ordersQueryBuilder) Offset(offset int) *ordersQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *ordersQueryBuilder) WhereId(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereIdIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereIdNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderById(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereOrderNo(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_no", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereOrderNoIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_no", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereOrderNoNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_no", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByOrderNo(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "order_no "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereMemberId(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "member_id", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereMemberIdIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "member_id", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereMemberIdNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "member_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByMemberId(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "member_id "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereCompanyId(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company_id", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCompanyIdIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company_id", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCompanyIdNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByCompanyId(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "company_id "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereCustomerName(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "customer_name", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCustomerNameIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "customer_name", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCustomerNameNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "customer_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByCustomerName(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "customer_name "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereDeviceInfo(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "device_info", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereDeviceInfoIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "device_info", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereDeviceInfoNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "device_info", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByDeviceInfo(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "device_info "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereContractNo(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contract_no", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContractNoIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contract_no", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContractNoNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contract_no", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByContractNo(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "contract_no "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereOfficialContractNo(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "official_contract_no", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereOfficialContractNoIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "official_contract_no", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereOfficialContractNoNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "official_contract_no", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByOfficialContractNo(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "official_contract_no "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereCertificationId(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "certification_id", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCertificationIdIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "certification_id", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCertificationIdNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "certification_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByCertificationId(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "certification_id "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereOrderSource(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_source", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereOrderSourceIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_source", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereOrderSourceNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_source", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByOrderSource(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "order_source "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereFileStatus(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_status", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFileStatusIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_status", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFileStatusNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByFileStatus(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "file_status "+order)
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentStatus(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_status", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentStatusIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_status", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentStatusNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByPaymentStatus(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "payment_status "+order)
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentChannelId(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_channel_id", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentChannelIdIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_channel_id", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentChannelIdNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_channel_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByPaymentChannelId(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "payment_channel_id "+order)
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentChannelType(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_channel_type", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentChannelTypeIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_channel_type", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentChannelTypeNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_channel_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByPaymentChannelType(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "payment_channel_type "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereContractStatus(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contract_status", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContractStatusIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contract_status", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContractStatusNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contract_status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByContractStatus(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "contract_status "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereContractSignedAt(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contract_signed_at", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContractSignedAtIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contract_signed_at", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContractSignedAtNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contract_signed_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByContractSignedAt(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "contract_signed_at "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereStatus(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereStatusIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereStatusNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByStatus(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "status "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereIsClosed(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_closed", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereIsClosedIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_closed", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereIsClosedNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_closed", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByIsClosed(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_closed "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereIsPaid(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_paid", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereIsPaidIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_paid", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereIsPaidNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_paid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByIsPaid(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_paid "+order)
	return qb
}

func (qb *ordersQueryBuilder) WherePayable(p model.Predicate, value float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payable", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePayableIn(value []float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payable", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePayableNotIn(value []float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payable", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByPayable(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "payable "+order)
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentNo(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_no", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentNoIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_no", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePaymentNoNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "payment_no", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByPaymentNo(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "payment_no "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereActuallyPaid(p model.Predicate, value float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "actually_paid", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereActuallyPaidIn(value []float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "actually_paid", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereActuallyPaidNotIn(value []float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "actually_paid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByActuallyPaid(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "actually_paid "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereBusinessAmount(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "business_amount", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereBusinessAmountIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "business_amount", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereBusinessAmountNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "business_amount", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByBusinessAmount(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "business_amount "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereTotalAmount(p model.Predicate, value float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "total_amount", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereTotalAmountIn(value []float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "total_amount", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereTotalAmountNotIn(value []float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "total_amount", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByTotalAmount(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "total_amount "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereTotalCost(p model.Predicate, value float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "total_cost", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereTotalCostIn(value []float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "total_cost", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereTotalCostNotIn(value []float64) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "total_cost", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByTotalCost(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "total_cost "+order)
	return qb
}

func (qb *ordersQueryBuilder) WherePaidAt(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "paid_at", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePaidAtIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "paid_at", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WherePaidAtNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "paid_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByPaidAt(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "paid_at "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereCityId(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "city_id", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCityIdIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "city_id", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCityIdNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "city_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByCityId(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "city_id "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereRefundStatus(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "refund_status", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereRefundStatusIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "refund_status", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereRefundStatusNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "refund_status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByRefundStatus(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "refund_status "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereRefundNo(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "refund_no", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereRefundNoIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "refund_no", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereRefundNoNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "refund_no", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByRefundNo(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "refund_no "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereComment(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "comment", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCommentIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "comment", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCommentNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "comment", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByComment(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "comment "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereFinishedAt(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "finished_at", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFinishedAtIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "finished_at", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFinishedAtNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "finished_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByFinishedAt(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "finished_at "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereBiContractNo(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bi_contract_no", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereBiContractNoIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bi_contract_no", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereBiContractNoNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bi_contract_no", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByBiContractNo(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "bi_contract_no "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereRecommender(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "recommender", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereRecommenderIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "recommender", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereRecommenderNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "recommender", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByRecommender(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "recommender "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereCashierUrl(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cashier_url", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCashierUrlIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cashier_url", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCashierUrlNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cashier_url", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByCashierUrl(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "cashier_url "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereModule(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "module", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereModuleIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "module", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereModuleNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "module", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByModule(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "module "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereCurrentHandlerUserId(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "current_handler_user_id", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCurrentHandlerUserIdIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "current_handler_user_id", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCurrentHandlerUserIdNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "current_handler_user_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByCurrentHandlerUserId(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "current_handler_user_id "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereCurrentHandlerUserName(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "current_handler_user_name", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCurrentHandlerUserNameIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "current_handler_user_name", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCurrentHandlerUserNameNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "current_handler_user_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByCurrentHandlerUserName(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "current_handler_user_name "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereFileUploadTime(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_upload_time", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFileUploadTimeIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_upload_time", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFileUploadTimeNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_upload_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByFileUploadTime(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "file_upload_time "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereFileApprovedTime(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_approved_time", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFileApprovedTimeIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_approved_time", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFileApprovedTimeNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_approved_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByFileApprovedTime(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "file_approved_time "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereFileGenReviewTime(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_gen_review_time", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFileGenReviewTimeIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_gen_review_time", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFileGenReviewTimeNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_gen_review_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByFileGenReviewTime(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "file_gen_review_time "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereFileRejectRemark(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_reject_remark", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFileRejectRemarkIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_reject_remark", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereFileRejectRemarkNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "file_reject_remark", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByFileRejectRemark(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "file_reject_remark "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereContactName(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_name", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactNameIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_name", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactNameNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByContactName(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "contact_name "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereContactMobile(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_mobile", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactMobileIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_mobile", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactMobileNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_mobile", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByContactMobile(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "contact_mobile "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereContactEmail(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_email", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactEmailIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_email", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactEmailNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_email", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByContactEmail(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "contact_email "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereContactTelephone(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_telephone", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactTelephoneIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_telephone", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactTelephoneNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_telephone", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByContactTelephone(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "contact_telephone "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereContactRemark(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_remark", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactRemarkIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_remark", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactRemarkNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_remark", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByContactRemark(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "contact_remark "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereContactAddress(p model.Predicate, value string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_address", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactAddressIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_address", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereContactAddressNotIn(value []string) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "contact_address", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByContactAddress(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "contact_address "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereCreatedAt(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCreatedAtIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereCreatedAtNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByCreatedAt(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *ordersQueryBuilder) WhereUpdatedAt(p model.Predicate, value int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereUpdatedAtIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) WhereUpdatedAtNotIn(value []int32) *ordersQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *ordersQueryBuilder) OrderByUpdatedAt(asc bool) *ordersQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}
